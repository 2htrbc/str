   url: "http://fl3.moveonjoy.com/EPIX_HITS/mono.m3u8"
  },
  ESPN: {
    name: "ESPN",
    url: "http://rhsbjv7k.tvclub.xyz/iptv/APM3584VN3P6"
  },
  Hallmark_Channel_East: {
    name: "Hallmark Channel East",
    url: "http://fl3.moveonjoy.com/HALLMARK_CHANNEL/mono.m3u8"
  },
  Hallmark_Drama: {
    name: "Hallmark Drama",
    url: "http://fl3.moveonjoy.com/HALLMARK_DRAMA/mono.m3u8"
  },
  HBO_East: {
    name: "HBO East",
    url: "http://143.244.60.30/HBO/mono.m3u8"
  },
  HBO2_East: {
    name: "HBO2 East",
    url: "http://143.244.60.30/HBO_2/mono.m3u8"
  },
  HBO_Comedy_East: {
    name: "HBO Comedy East",
    url: "http://143.244.60.30/HBO_COMEDY/mono.m3u8"
  },
  HBO_Family_East: {
    name: "HBO Family East",
    url: "http://143.244.60.30/HBO_FAMILY/mono.m3u8"
  },
  HBO_Zone_East: {
    name: "HBO Zone East",
    url: "http://143.244.60.30/HBO_ZONE/mono.m3u8"
  },
  HGTV_East: {
    name: "HGTV East",
    url: "http://143.244.60.30/HGTV/mono.m3u8"
  },
  HLN: {
    name: "HLN",
    url: "http://143.244.60.30/HLN/mono.m3u8"
  },
  ID_East: {
    name: "ID (Investigation Discovery) East",
    url: "http://143.244.60.30/INVESTIGATION_DISCOVERY/mono.m3u8"
  },
  ION: {
    name: "ION",
    url: "http://143.244.60.30/ION_TV/mono.m3u8"
  },
  Laff_TV: {
    name: "Laff TV",
    url: "http://72.46.118.193/Laff/mono.m3u8"
  },
  Lifetime_East: {
    name: "Lifetime East",
    url: "http://143.244.60.30/LIFETIME/mono.m3u8"
  },
  Lifetime_Movies: {
    name: "Lifetime Movies Network",
    url: "http://143.244.60.30/LIFETIME_MOVIE_NETWORK/mono.m3u8"
  },
  Logo_East: {
    name: "Logo East",
    url: "http://143.244.60.30/Logo/mono.m3u8"
  },
  MeTV: {
    name: "MeTV",
    url: "http://143.244.60.30/ME_TV/mono.m3u8"
  },
  MLB_Network: {
    name: "MLB Network",
    url: "http://143.244.60.30/MLB_NETWORK/mono.m3u8"
  },
  MotorTrend: {
    name: "MotorTrend",
    url: "http://143.244.60.30/MOTOR_TREND/mono.m3u8"
  },
  MSNBC: {
    name: "MSNBC",
    url: "http://143.244.60.30/MSNBC/mono.m3u8"
  },
  MTV_East: {
    name: "MTV East",
    url: "http://143.244.60.30/MTV/mono.m3u8"
  },
  MTV2_East: {
    name: "MTV2 East",
    url: "http://143.244.60.30/MTV_2/mono.m3u8"
  },
  MTV_Classic: {
    name: "MTV Classic",
    url: "http://143.244.60.30/MTV_CLASSIC/mono.m3u8"
  },
  MTV_Live: {
    name: "MTV Live",
    url: "http://143.244.60.30/MTV_LIVE/mono.m3u8"
  },
  mtvU: {
    name: "mtvU",
    url: "http://143.244.60.30/MTV_U/mono.m3u8"
  },
  NatGeo_East: {
    name: "National Geographic East",
    url: "http://143.244.60.30/National_Geographic/mono.m3u8"
  },
  NatGeo_Wild: {
    name: "National Geographic Wild",
    url: "http://143.244.60.30/Nat_Geo_Wild/mono.m3u8"
  },
  NBA_TV: {
    name: "NBA TV",
    url: "http://143.244.60.30/NBA_TV/mono.m3u8"
  },
  NBC_East: {
    name: "NBC East (Chicago)",
    url: "http://fl1.moveonjoy.com/NBC_EAST/mono.m3u8"
  },
  NewsNation: {
    name: "NewsNation",
    url: "http://fl3.moveonjoy.com/NEWS_NATION/mono.m3u8"
  },
  NFL_Network: {
    name: "NFL Network",
    url: "http://fl3.moveonjoy.com/NFL_NETWORK/mono.m3u8"
  },
  NHL_Network: {
    name: "NHL Network",
    url: "http://fl3.moveonjoy.com/NHL_NETWORK/mono.m3u8"
  },
  Nickelodeon_East: {
    name: "Nickelodeon East",
    url: "http://fl1.moveonjoy.com/NICKELODEON/mono.m3u8"
  },
  NickJr_East: {
    name: "NickJr East",
    url: "http://fl3.moveonjoy.com/NICK_JR/mono.m3u8"
  },
  NickMusic: {
    name: "NickMusic USA",
    url: "http://fl3.moveonjoy.com/NICK_MUSIC/mono.m3u8"
  },
  NickToons_East: {
    name: "NickToons East",
    url: "http://fl1.moveonjoy.com/NICKTOONS/mono.m3u8"
  },
  OWN_East: {
    name: "Oprah Winfrey Network (OWN) East",
    url: "http://fl3.moveonjoy.com/OWN/mono.m3u8"
  },
  Outdoor_Channel: {
    name: "Outdoor Channel",
    url: "http://fl3.moveonjoy.com/OUTDOOR_CHANNEL/mono.m3u8"
  },
  Oxygen_East: {
    name: "Oxygen East",
    url: "http://fl3.moveonjoy.com/OXYGEN/mono.m3u8"
  },
  Paramount_Network_East: {
    name: "Paramount Network East",
    url: "http://fl3.moveonjoy.com/PARAMOUNT_NETWORK/mono.m3u8"
  },
  PopTV_East: {
    name: "PopTV East",
    url: "http://fl3.moveonjoy.com/Pop_TV/mono.m3u8"
  },
  ReelzChannel: {
    name: "ReelzChannel",
    url: "http://fl3.moveonjoy.com/REELZ/mono.m3u8"
  },
  Revolt: {
    name: "Revolt",
    url: "http://fl3.moveonjoy.com/REVOLT/mono.m3u8"
  },
  SEC_Network: {
    name: "SEC Network",
    url: "http://fl3.moveonjoy.com/SEC_NETWORK/mono.m3u8"
  },
  Showtime_East: {
    name: "Showtime East",
    url: "http://fl3.moveonjoy.com/SHOWTIME/mono.m3u8"
  },
  Showtime_2_East: {
    name: "Showtime 2 East",
    url: "http://fl3.moveonjoy.com/SHOWTIME_2/mono.m3u8"
  },
  Showtime_Extreme_East: {
    name: "Showtime Extreme East",
    url: "http://fl3.moveonjoy.com/SHOWTIME_EXTREME/mono.m3u8"
  },
  Showtime_Next_East: {
    name: "Showtime Next East",
    url: "http://fl3.moveonjoy.com/SHOWTIME_NEXT/mono.m3u8"
  },
  Showtime_Women_East: {
    name: "Showtime Women East",
    url: "http://fl3.moveonjoy.com/SHOWTIME_WOMEN/mono.m3u8"
  },
  Stadium: {
    name: "Stadium",
    url: "http://fl3.moveonjoy.com/STADIUM/mono.m3u8"
  },
  Starz_East: {
    name: "Starz East",
    url: "http://fl3.moveonjoy.com/STARZ/mono.m3u8"
  },
  Starz_Comedy_East: {
    name: "Starz Comedy East",
    url: "http://fl3.moveonjoy.com/STARZ_COMEDY/mono.m3u8"
  },
  Starz_Edge_East: {
    name: "Starz Edge East",
    url: "http://fl3.moveonjoy.com/STARZ_EDGE/mono.m3u8"
  },
  Starz_Encore_East: {
    name: "Starz Encore East",
    url: "http://fl3.moveonjoy.com/STARZ_ENCORE/mono.m3u8"
  },
  Starz_Encore_Action: {
    name: "Starz Encore Action",
    url: "http://fl3.moveonjoy.com/STARZ_ENCORE_ACTION/mono.m3u8"
  },
  Starz_Encore_Westerns: {
    name: "Starz Encore Westerns",
    url: "http://fl3.moveonjoy.com/STARZ_ENCORE_WESTERNS/mono.m3u8"
  },
  SundanceTV: {
    name: "SundanceTV",
    url: "http://fl3.moveonjoy.com/SUNDANCE/mono.m3u8"
  },
  SYFY_East: {
    name: "SYFY East",
    url: "http://fl3.moveonjoy.com/SYFY/mono.m3u8"
  },
  TBS_East: {
    name: "TBS East",
    url: "http://fl1.moveonjoy.com/TBS/mono.m3u8"
  },
  TCM_East: {
    name: "TCM (Turner Classic Movies) East",
    url: "http://fl1.moveonjoy.com/TCM/mono.m3u8"
  },
  Tennis_Channel: {
    name: "Tennis Channel",
    url: "http://fl3.moveonjoy.com/TENNIS_CHANNEL/mono.m3u8"
  },
  TLC_East: {
    name: "TLC (The Learning Channel) East",
    url: "http://fl3.moveonjoy.com/TLC/mono.m3u8"
  },
  TNT_East: {
    name: "TNT East",
    url: "http://143.244.60.30/TNT/mono.m3u8"
  },
  truTV_East: {
    name: "truTV East",
    url: "http://fl3.moveonjoy.com/TRU_TV/mono.m3u8"
  },
  TVLand: {
    name: "TVLand",
    url: "http://fl3.moveonjoy.com/TV_Land/mono.m3u8"
  },
  TVOne: {
    name: "TVOne",
    url: "http://fl3.moveonjoy.com/TV_ONE/mono.m3u8"
  },
  VH1_East: {
    name: "VH1 East",
    url: "http://fl3.moveonjoy.com/VH1/mono.m3u8"
  },
  Vice: {
    name: "Vice",
    url: "http://fl3.moveonjoy.com/VICELAND/mono.m3u8"
  },
  Weather_Channel: {
    name: "Weather Channel",
    url: "http://fl3.moveonjoy.com/THE_WEATHER_CHANNEL/mono.m3u8"
  },
  WeTV: {
    name: "WeTV",
    url: "http://fl1.moveonjoy.com/WE_TV/mono.m3u8"
  },
  YES_Network: {
    name: "YES Network",
    url: "http://fl3.moveonjoy.com/YES_NETWORK/mono.m3u8"
  },
  Game_Show_Network: {
    name: "GAME SHOW NETWORK",
    url: "https://a-cdn.klowdtv.com/live2/gsn_720p/playlist.m3u8"
  },
  WWE_Network: {
    name: "WWE NETWORK",
    url: "http://fl3.moveonjoy.com/WWE/mono.m3u8"
  },
  USA_Network: {
    name: "USA Network",
    url: "http://fl3.moveonjoy.com/USA_Network/mono.m3u8"
  },
  NASA_TV_Public: {
    name: "NASA TV Public",
    url: "https://ntv1.akamaized.net/hls/live/2014075/NASA-NTV1-HLS/master_2000.m3u8"
  },
  NASA_UHD: {
    name: "NASA UHD",
    url: "https://endpnt.com/hls/nasa4k/nasa-uhd-p30-stream.m3u8"
  },
  NASA_TV_Media: {
    name: "NASA TV Media",
    url: "https://ntv2.akamaized.net/hls/live/2013923/NASA-NTV2-HLS/master.m3u8"
  },
  Magnolia: {
    name: "Magnolia",
    url: "http://fl3.moveonjoy.com/DIY/mono.m3u8"
  },
  AXSTV: {
    name: "AXSTV",
    url: "https://dikcfc9915kp8.cloudfront.net/hls/1080p/playlist.m3u8"
  },
  Al_Jazeera: {
    name: "Al Jazeera",
    url: "https://d1cy85syyhvqz5.cloudfront.net/v1/master/7b67fbda7ab859400a821e9aa0deda20ab7ca3d2/aljazeeraLive/AJE/mono.m3u8"
  },
  TSN_1: {
    name: "TSN 1",
    url: "http://fl5.moveonjoy.com/TSN_1/mono.m3u8"
  },
  TSN_2: {
    name: "TSN 2",
    url: "http://fl5.moveonjoy.com/TSN_2/mono.m3u8"
  },
  TSN_3: {
    name: "TSN 3",
    url: "http://fl5.moveonjoy.com/TSN_3/mono.m3u8"
  },
  TSN_4: {
    name: "TSN 4",
    url: "http://fl5.moveonjoy.com/TSN_4/mono.m3u8"
  },
  TSN_5: {
    name: "TSN 5",
    url: "http://fl5.moveonjoy.com/TSN_5/mono.m3u8"
  }
 };

// Home page: list of channels app.get('/', (req, res) => { const html = <!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8" /> <meta name="viewport" content="width=device-width, initial-scale=1.0"/> <title>IPTV Channel List</title> <style> body { font-family: Arial, sans-serif; background: #111; color: #fff; padding: 20px; } h1 { color: #00d8ff; } ul { list-style: none; padding: 0; } li { margin: 10px 0; } a { color: #00d8ff; text-decoration: none; font-weight: bold; } a:hover { text-decoration: underline; } </style> </head> <body> <h1>\uD83C\uDF9A CHANNEL LIST</h1> <ul> ${Object.entries(streams).map(([key, stream]) => <li><a href="/${key}/index.m3u8" target="_blank">${stream.name}</a></li> ).join('')} </ul> </body> </html> ; res.send(html); });

// Proxy master playlist (.m3u8) app.get('/:stream/index.m3u8', (req, res) => { const key = req.params.stream; const stream = streams[key];

if (!stream) return res.status(404).send('‚ùå Stream not found');

const sourceUrl = stream.url; const baseUrl = new URL(sourceUrl); const basePath = baseUrl.href.substring(0, baseUrl.href.lastIndexOf('/') + 1);

request.get(sourceUrl, (err, response, body) => { if (err || response.statusCode !== 200) { return res.status(500).send('‚ùå Failed to load stream'); }

const rewritten = body.replace(/^(?!#)([^\n\r]+)$/gm, (line) => {
  line = line.trim();
  if (!line || line.startsWith('#')) return line;
  const abs = new URL(line, basePath).href;
  return `/segment.ts?url=${encodeURIComponent(abs)}`;
});

res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');
res.send(rewritten);

}); });

// Proxy video segments (.ts) app.get('/segment.ts', (req, res) => { const { url } = req.query; if (!url) return res.status(400).send('‚ùå URL missing');

request({ url, headers: { 'User-Agent': req.headers['user-agent'] || '' } }) .on('error', () => res.status(500).send('‚ùå Failed to load segment')) .pipe(res); });

// Start server app.listen(PORT, () => { console.log(‚úÖ Server running on port ${PORT}); });

